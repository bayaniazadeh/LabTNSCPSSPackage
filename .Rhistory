frailty_results <- Frailty_Calculation(updated_path)
fr_grouped <- frailty_results$fr_grouped
fr_grouped_como <- frailty_results$fr_grouped_como
# Capture results and convert to data frames
comorbidity_results <- Comorbidity_Frailty_Calculation(updated_path, fr_grouped, fr_grouped_como)#updated_episodes_V2.csv
comorbidity_results <- lapply(comorbidity_results, function(x) {
if (!is.data.frame(x)) as.data.frame(x) else x
})
return(comorbidity_results)
}
# Run the pipeline
df_result <- run_pipeline(input_file)
source("./CHUM_Code/setup_package.R")  # Load and install required packages
source("./CHUM_Code/source_scripts.R")  # Source external scripts
col_mapping <- list(patient_id = "trajectoire_id",
ICD = "diagnostic_code",
start_date = "date_debut",
end_date = "date_fin",
episode_id = "episode_id")
run_pipeline <- function(input_file) {
Create_data(input_file)
chronic_pathologies(cleaned_path)
frailty_results <- Frailty_Calculation(updated_path)
fr_grouped <- frailty_results$fr_grouped
fr_grouped_como <- frailty_results$fr_grouped_como
# Capture results and convert to data frames
comorbidity_results <- Comorbidity_Frailty_Calculation(updated_path, fr_grouped, fr_grouped_como)#updated_episodes_V2.csv
comorbidity_results <- lapply(comorbidity_results, function(x) {
if (!is.data.frame(x)) as.data.frame(x) else x
})
return(comorbidity_results)
}
# Run the pipeline
df_result <- run_pipeline(input_file)
source("./CHUM_Code/setup_package.R")  # Load and install required packages
source("./CHUM_Code/source_scripts.R")  # Source external scripts
coding_system <- get_coding_system()
invisible(sapply(list.files("CHUM_Code", pattern = "\\.R$", full.names = TRUE), source))
#input_file <- "./CHUM_Data/data_test1.csv", mimic_test2.csv
input_file <- "./CHUM_Data/testpackage.csv"
input_basename <- tools::file_path_sans_ext(basename(input_file))
cleaned_path <- paste0("CHUM_Data/input_data_cleaned_", input_basename, ".csv")
updated_path <- paste0("CHUM_Data/updated_episodes_carry_forward_", input_basename, ".csv")
col_mapping <- list(patient_id = "trajectoire_id",
ICD = "diagnostic_code",
start_date = "date_debut",
end_date = "date_fin",
episode_id = "episode_id")
run_pipeline <- function(input_file) {
Create_data(input_file)
chronic_pathologies(cleaned_path)
frailty_results <- Frailty_Calculation(updated_path)
fr_grouped <- frailty_results$fr_grouped
fr_grouped_como <- frailty_results$fr_grouped_como
# Capture results and convert to data frames
comorbidity_results <- Comorbidity_Frailty_Calculation(updated_path, fr_grouped, fr_grouped_como)#updated_episodes_V2.csv
comorbidity_results <- lapply(comorbidity_results, function(x) {
if (!is.data.frame(x)) as.data.frame(x) else x
})
return(comorbidity_results)
}
# Run the pipeline
df_result <- run_pipeline(input_file)
#input_file <- "./CHUM_Data/data_test1.csv", mimic_test2.csv
input_file <- "./CHUM_Data/DonneComplication_v3.csv"
input_basename <- tools::file_path_sans_ext(basename(input_file))
cleaned_path <- paste0("CHUM_Data/input_data_cleaned_", input_basename, ".csv")
updated_path <- paste0("CHUM_Data/updated_episodes_carry_forward_", input_basename, ".csv")
col_mapping <- list(patient_id = "trajectoire_id",
ICD = "diagnostic_code",
start_date = "date_debut_x",
end_date = "date_fin_x",
episode_id = "episode_id")
run_pipeline <- function(input_file) {
Create_data(input_file)
chronic_pathologies(cleaned_path)
frailty_results <- Frailty_Calculation(updated_path)
fr_grouped <- frailty_results$fr_grouped
fr_grouped_como <- frailty_results$fr_grouped_como
# Capture results and convert to data frames
comorbidity_results <- Comorbidity_Frailty_Calculation(updated_path, fr_grouped, fr_grouped_como)#updated_episodes_V2.csv
comorbidity_results <- lapply(comorbidity_results, function(x) {
if (!is.data.frame(x)) as.data.frame(x) else x
})
return(comorbidity_results)
}
# Run the pipeline
df_result <- run_pipeline(input_file)
source("./CHUM_Code/setup_package.R")  # Load and install required packages
source("./CHUM_Code/source_scripts.R")  # Source external scripts
coding_system <- get_coding_system()
invisible(sapply(list.files("CHUM_Code", pattern = "\\.R$", full.names = TRUE), source))
#input_file <- "./CHUM_Data/data_test1.csv", mimic_test2.csv
input_file <- "./CHUM_Data/mimic_test.csv"
input_basename <- tools::file_path_sans_ext(basename(input_file))
cleaned_path <- paste0("CHUM_Data/input_data_cleaned_", input_basename, ".csv")
updated_path <- paste0("CHUM_Data/updated_episodes_carry_forward_", input_basename, ".csv")
col_mapping <- list(patient_id = "patient_id",
ICD = "icd_code",
start_date = "start_date",
end_date = "end_date",
episode_id = "episode_id")
run_pipeline <- function(input_file) {
Create_data(input_file)
chronic_pathologies(cleaned_path)
frailty_results <- Frailty_Calculation(updated_path)
fr_grouped <- frailty_results$fr_grouped
fr_grouped_como <- frailty_results$fr_grouped_como
# Capture results and convert to data frames
comorbidity_results <- Comorbidity_Frailty_Calculation(updated_path, fr_grouped, fr_grouped_como)#updated_episodes_V2.csv
comorbidity_results <- lapply(comorbidity_results, function(x) {
if (!is.data.frame(x)) as.data.frame(x) else x
})
return(comorbidity_results)
}
# Run the pipeline
df_result <- run_pipeline(input_file)
#input_file <- "./CHUM_Data/data_test1.csv", mimic_test2.csv
input_file <- "./CHUM_Data/mimic_test_icd11.csv"
input_basename <- tools::file_path_sans_ext(basename(input_file))
cleaned_path <- paste0("CHUM_Data/input_data_cleaned_", input_basename, ".csv")
updated_path <- paste0("CHUM_Data/updated_episodes_carry_forward_", input_basename, ".csv")
col_mapping <- list(patient_id = "patient_id",
ICD = "icd_code",
start_date = "start_date",
end_date = "end_date",
episode_id = "episode_id")
run_pipeline <- function(input_file) {
Create_data(input_file)
chronic_pathologies(cleaned_path)
frailty_results <- Frailty_Calculation(updated_path)
fr_grouped <- frailty_results$fr_grouped
fr_grouped_como <- frailty_results$fr_grouped_como
# Capture results and convert to data frames
comorbidity_results <- Comorbidity_Frailty_Calculation(updated_path, fr_grouped, fr_grouped_como)#updated_episodes_V2.csv
comorbidity_results <- lapply(comorbidity_results, function(x) {
if (!is.data.frame(x)) as.data.frame(x) else x
})
return(comorbidity_results)
}
# Run the pipeline
df_result <- run_pipeline(input_file)
source("./CHUM_Code/setup_package.R")  # Load and install required packages
source("./CHUM_Code/source_scripts.R")  # Source external scripts
coding_system <- get_coding_system()
invisible(sapply(list.files("CHUM_Code", pattern = "\\.R$", full.names = TRUE), source))
#input_file <- "./CHUM_Data/data_test1.csv", mimic_test2.csv
input_file <- "./CHUM_Data/mimic_test_icd10.csv"
input_basename <- tools::file_path_sans_ext(basename(input_file))
cleaned_path <- paste0("CHUM_Data/input_data_cleaned_", input_basename, ".csv")
updated_path <- paste0("CHUM_Data/updated_episodes_carry_forward_", input_basename, ".csv")
col_mapping <- list(patient_id = "patient_id",
ICD = "icd_code",
start_date = "start_date",
end_date = "end_date",
episode_id = "episode_id")
run_pipeline <- function(input_file) {
Create_data(input_file)
chronic_pathologies(cleaned_path)
frailty_results <- Frailty_Calculation(updated_path)
fr_grouped <- frailty_results$fr_grouped
fr_grouped_como <- frailty_results$fr_grouped_como
# Capture results and convert to data frames
comorbidity_results <- Comorbidity_Frailty_Calculation(updated_path, fr_grouped, fr_grouped_como)#updated_episodes_V2.csv
comorbidity_results <- lapply(comorbidity_results, function(x) {
if (!is.data.frame(x)) as.data.frame(x) else x
})
return(comorbidity_results)
}
# Run the pipeline
df_result <- run_pipeline(input_file)
source("./CHUM_Code/setup_package.R")  # Load and install required packages
source("./CHUM_Code/source_scripts.R")  # Source external scripts
coding_system <- get_coding_system()
invisible(sapply(list.files("CHUM_Code", pattern = "\\.R$", full.names = TRUE), source))
updated_path <- "./CHUM_Data/cohort_avantPro.csv"
frailty_results <- Frailty_Calculation(updated_path)
fr_grouped <- frailty_results$fr_grouped
fr_grouped_como <- frailty_results$fr_grouped_como
# Capture results and convert to data frames
comorbidity_results <- Comorbidity_Frailty_Calculation(updated_path, fr_grouped, fr_grouped_como)#updated_episodes_V2.csv
source("./CHUM_Code/setup_package.R")  # Load and install required packages
source("./CHUM_Code/source_scripts.R")  # Source external scripts
coding_system <- get_coding_system()
invisible(sapply(list.files("CHUM_Code", pattern = "\\.R$", full.names = TRUE), source))
input_file <- "./CHUM_Data/mimic_test_icd10_avant.csv"
updated_path <- "./CHUM_Data/cohort_avantPro.csv"
frailty_results <- Frailty_Calculation(updated_path)
input_file <- "./CHUM_Data/mimic_avant.csv"
updated_path <- "./CHUM_Data/mimic_avant.csv"
frailty_results <- Frailty_Calculation(updated_path)
fr_grouped <- frailty_results$fr_grouped
fr_grouped_como <- frailty_results$fr_grouped_como
# Capture results and convert to data frames
comorbidity_results <- Comorbidity_Frailty_Calculation(updated_path, fr_grouped, fr_grouped_como)#updated_episodes_V2.csv
source("./CHUM_Code/setup_package.R")  # Load and install required packages
source("./CHUM_Code/source_scripts.R")  # Source external scripts
coding_system <- get_coding_system()
invisible(sapply(list.files("CHUM_Code", pattern = "\\.R$", full.names = TRUE), source))
#input_file <- "./CHUM_Data/data_test1.csv", mimic_test2.csv
input_file <- "./CHUM_Data/mimic_avant.csv"
input_basename <- tools::file_path_sans_ext(basename(input_file))
cleaned_path <- paste0("CHUM_Data/input_data_cleaned_", input_basename, ".csv")
updated_path <- paste0("CHUM_Data/updated_episodes_carry_forward_", input_basename, ".csv")
col_mapping <- list(patient_id = "patient_id",
ICD = "icd_code",
start_date = "start_date",
end_date = "end_date",
episode_id = "episode_id")
updated_path <- "./CHUM_Data/updated_episodes_carry_forward_DonneComplication_v3.csv"
coding_system <- get_coding_system()
source("./CHUM_Code/setup_package.R")  # Load and install required packages
source("./CHUM_Code/source_scripts.R")  # Source external scripts
coding_system <- get_coding_system()
updated_path <- "./CHUM_Data/updated_episodes_carry_forward_DonneComplication_v3.csv"
frailty_results <- Frailty_Calculation(updated_path)
fr_grouped <- frailty_results$fr_grouped
fr_grouped_como <- frailty_results$fr_grouped_como
# Capture results and convert to data frames
comorbidity_results <- Comorbidity_Frailty_Calculation(updated_path, fr_grouped, fr_grouped_como)#updated_episodes_V2.csv
input_file <- "./CHUM_Data/cohort_avantPro"
Create_data(input_file)
input_file <- "./CHUM_Data/cohort_avantPro.csv"
Create_data(input_file)
chronic_pathologies(input_file)
updated_path <- "./CHUM_Data/updated_episodes_carry_forward_DonneComplication_v3.csv"
# Capture results and convert to data frames
comorbidity_results <- Comorbidity_Frailty_Calculation(updated_path, fr_grouped, fr_grouped_como)#updated_episodes_V2.csv
updated_path <- "./CHUM_Data/updated_episodes_carry_forward_mimic_test_icd10.csv"
coding_system <- get_coding_system()
updated_path <- "./CHUM_Data/updated_episodes_carry_forward_mimic_test_icd10.csv"
# Capture results and convert to data frames
comorbidity_results <- Comorbidity_Frailty_Calculation(updated_path, fr_grouped, fr_grouped_como)#updated_episodes_V2.csv
updated_path <- "./CHUM_Data/cohort_avantPro.csv"
# Capture results and convert to data frames
comorbidity_results <- Comorbidity_Frailty_Calculation(updated_path, fr_grouped, fr_grouped_como)#updated_episodes_V2.csv
updated_path <- "./CHUM_Data/updated_episodes_carry_forward_DonneComplication_v3.csv"
# Capture results and convert to data frames
comorbidity_results <- Comorbidity_Frailty_Calculation(updated_path, fr_grouped, fr_grouped_como)#updated_episodes_V2.csv
#input_file <- "./CHUM_Data/data_test1.csv", mimic_test2.csv
input_file <- "./CHUM_Data/mimic_avant.csv"
input_basename <- tools::file_path_sans_ext(basename(input_file))
cleaned_path <- paste0("CHUM_Data/input_data_cleaned_", input_basename, ".csv")
updated_path <- paste0("CHUM_Data/updated_episodes_carry_forward_", input_basename, ".csv")
col_mapping <- list(patient_id = "patient_id",
ICD = "icd_code",
start_date = "start_date",
end_date = "end_date",
episode_id = "episode_id")
#input_file <- "./CHUM_Data/data_test1.csv", mimic_test2.csv
input_file <- "./CHUM_Data/mimic_test_icd10.csv"
input_basename <- tools::file_path_sans_ext(basename(input_file))
cleaned_path <- paste0("CHUM_Data/input_data_cleaned_", input_basename, ".csv")
updated_path <- paste0("CHUM_Data/updated_episodes_carry_forward_", input_basename, ".csv")
col_mapping <- list(patient_id = "patient_id",
ICD = "icd_code",
start_date = "start_date",
end_date = "end_date",
episode_id = "episode_id")
run_pipeline <- function(input_file) {
Create_data(input_file)
chronic_pathologies(cleaned_path)
frailty_results <- Frailty_Calculation(updated_path)
fr_grouped <- frailty_results$fr_grouped
fr_grouped_como <- frailty_results$fr_grouped_como
# Capture results and convert to data frames
comorbidity_results <- Comorbidity_Frailty_Calculation(updated_path, fr_grouped, fr_grouped_como)#updated_episodes_V2.csv
comorbidity_results <- lapply(comorbidity_results, function(x) {
if (!is.data.frame(x)) as.data.frame(x) else x
})
return(comorbidity_results)
}
# Run the pipeline
df_result <- run_pipeline(input_file)
source("./CHUM_Code/setup_package.R")  # Load and install required packages
source("./CHUM_Code/source_scripts.R")  # Source external scripts
coding_system <- get_coding_system()
invisible(sapply(list.files("CHUM_Code", pattern = "\\.R$", full.names = TRUE), source))
#input_file <- "./CHUM_Data/data_test1.csv", mimic_test2.csv
input_file <- "./CHUM_Data/testpackage.csv"
input_basename <- tools::file_path_sans_ext(basename(input_file))
cleaned_path <- paste0("CHUM_Data/input_data_cleaned_", input_basename, ".csv")
updated_path <- paste0("CHUM_Data/updated_episodes_carry_forward_", input_basename, ".csv")
col_mapping <- list(patient_id = "trajectoire_id",
ICD = "diagnostic_code",
start_date = "date_debut",
end_date = "date_fin",
episode_id = "episode_id")
run_pipeline <- function(input_file) {
Create_data(input_file)
chronic_pathologies(cleaned_path)
frailty_results <- Frailty_Calculation(updated_path)
fr_grouped <- frailty_results$fr_grouped
fr_grouped_como <- frailty_results$fr_grouped_como
# Capture results and convert to data frames
comorbidity_results <- Comorbidity_Frailty_Calculation(updated_path, fr_grouped, fr_grouped_como)#updated_episodes_V2.csv
comorbidity_results <- lapply(comorbidity_results, function(x) {
if (!is.data.frame(x)) as.data.frame(x) else x
})
return(comorbidity_results)
}
# Run the pipeline
df_result <- run_pipeline(input_file)
updated_path <- paste0("CHUM_Data/updated_episodes_carry_forward_", input_basename, ".csv")
df <- fread(updated_path, sep = ',', encoding = 'UTF-8')
if (coding_system == "ICD-10-CA") { # Other options: "ICD-10-CM", and "ICD-11"
data("Frailty_mapping")
df_fr <- Frailty_mapping
names(df_fr)[names(df_fr) == "ICD_10_CA_LabTNS"] <- "ICD"
names(df_fr)[names(df_fr) == "frailty_Comorbidity"] <- "frailty_category"
}else if (coding_system == "ICD-10-CM"){
data("Frailty_ICD10CM")
df_fr <- Frailty_ICD10CM
names(df_fr)[names(df_fr) == "CIM10CMcodes"] <- "ICD"
names(df_fr)[names(df_fr) == "frailty_Comorbidity"] <- "frailty_category"
}else if (coding_system == "ICD-11"){
data("Frailty_ICD11")
df_fr <- Frailty_ICD11
names(df_fr)[names(df_fr) == "ICD11codes"] <- "ICD"
names(df_fr)[names(df_fr) == "frailty_Comorbidity"] <- "frailty_category"
}
data("Frailty_Comorbidity_Mapping")
df_fr_mo <- Frailty_Comorbidity_Mapping
if (coding_system == "ICD-10-CA") { # Other options: "ICD-10-CM", and "ICD-11"
names(df_fr_mo)[names(df_fr_mo) == "ICD_10_CA_Codes"] <- "ICD"
}else if (coding_system == "ICD-10-CM"){
names(df_fr_mo)[names(df_fr_mo) == "CIM10CMcodes"] <- "ICD"
}else if (coding_system == "ICD-11"){
names(df_fr_mo)[names(df_fr_mo) == "ICD11codes"] <- "ICD"
}
# clean icd codes
remove_dots <- function(x) {
gsub("\\.", "", x)
}
# Convert 'Code' column to character type and remove dots
df_fr$ICD <- as.character(df_fr$ICD)
df_fr$ICD <- remove_dots(df_fr$ICD)
# Sort data by 'Patient_id' and 'start_date'
df_sorted <- df %>%
arrange(patient_id, start_date)
filtered_df_fr <- df_sorted #[!is.na(df_sorted$date_t0), ]
filtered_df <- df_sorted
# Get unique categories from df_fr
unique_categories <- unique(df_fr$frailty_category)
# Add new columns to filtered_df for each category with initial values of 0, prefixed with "fr_"
for (category in unique_categories) {
filtered_df_fr[[category]] <- 0
}
# Function to update filtered_df based on df_fr, prioritizing exact matches and skipping partial match if exact found
update_columns <- function(df_fr, filtered_df) {
# Create a named list where each category is associated with its codes
category_codes_list <- split(df_fr$ICD, df_fr$frailty_category)
# Ensure all unique categories are columns in filtered_df and initialized to 0
unique_categories <- names(category_codes_list)
for (category in unique_categories) {
if (!(category %in% colnames(filtered_df))) {
filtered_df[[category]] <- 0
}
}
filtered_df$updated_icd_codes <- as.character(filtered_df$updated_icd_codes)
filtered_df$updated_icd_codes <- strsplit(filtered_df$updated_icd_codes, ",")
# Iterate over each row in filtered_df
for (i in seq_len(nrow(filtered_df))) {
# Get the list of codes in the current row
codes <- unlist(filtered_df$updated_icd_codes[[i]])  # Convert list to a flat vector
# Check each code in 'codes'
for (code in codes) {
# Loop through each category and check for matches
for (category in unique_categories) {
# Get all codes for the current category
category_codes <- category_codes_list[[category]]
# Check for an exact match first
if (code %in% category_codes) {
filtered_df[[category]][i] <- 1
break  # Skip to the next code since exact match was found
} else {
# If no exact match, fall back to a three-character prefix match
code_prefix <- substr(code, 1, 3)
category_code_prefixes <- substr(category_codes, 1, 3)
if (any(code_prefix == category_code_prefixes)) {
filtered_df[[category]][i] <- 1
}
}
}
}
}
return(filtered_df)
}
# Apply the function
filtered_df_fr <- update_columns(df_fr, filtered_df_fr)
# Compute frailty score by summing only the selected columns from unique_categories
frailty_pop2 <- filtered_df_fr %>%
mutate(frailty_score = rowSums(select(., all_of(unique_categories)), na.rm = TRUE))  # Exclude NA values
frailty_pop2 <- frailty_pop2 %>%
mutate(across(where(is.list), ~ sapply(., function(x) paste(unlist(x), collapse = ","))))
View(frailty_pop2)
unique_categories
# Compute frailty score by summing only the selected columns from unique_categories
frailty_pop2 <- filtered_df_fr %>%
mutate(frailty_score = rowSums(select(., all_of(unique_categories)), na.rm = TRUE))  # Exclude NA values
View(frailty_pop2)
str(unique_categories)
colnames(filtered_df_fr)
str(unique_categories)  # should return chr [1:XX]
unique_categories <- unlist(unique_categories)
# Compute frailty score by summing only the selected columns from unique_categories
frailty_pop2 <- filtered_df_fr %>%
mutate(frailty_score = rowSums(select(., all_of(unique_categories)), na.rm = TRUE))  # Exclude NA values
View(frailty_pop2)
frailty_pop2 <- frailty_pop2 %>%
mutate(across(where(is.list), ~ sapply(., function(x) paste(unlist(x), collapse = ","))))
colnames(select(filtered_df_fr, all_of(unique_categories)))
# Make sure unique_categories is a character vector
unique_categories <- unlist(unique_categories)
# Check what columns are actually selected
intersect(unique_categories, colnames(filtered_df_fr))) # should be length > 0
# Check what columns are actually selected
intersect(unique_categories, colnames(filtered_df_fr)) # should be length > 0
frailty_pop2 <- filtered_df_fr %>%
mutate(frailty_score = rowSums(select(., all_of(unique_categories)), na.rm = TRUE)) %>%
mutate(across(where(is.list), ~ sapply(., function(x) paste(unlist(x), collapse = ","))))
View(frailty_pop2)
frailty_pop2 <- filtered_df_fr %>%
mutate(frailty_score = rowSums(select(., all_of(unique_categories)), na.rm = TRUE)) %>%
mutate(across(where(is.list), ~ sapply(., function(x) paste(unlist(x), collapse = ","))))
frailty_pop3 <- filtered_df_fr %>%
mutate(frailty_score = rowSums(select(., all_of(unique_categories)), na.rm = TRUE)) %>%
mutate(across(where(is.list), ~ sapply(., function(x) paste(unlist(x), collapse = ","))))
# Make sure unique_categories is a character vector
# Define columns to exclude
cols_to_exclude <- c("ICD", "category_codes", "chronique_code_cat2", "cleaned_chronique_code_cat2",
"chronique_code_cat1", "cleaned_chronique_code_cat1", "basal_codes", "updated_icd_codes")
# Select all other columns for rowSums
frailty_pop2 <- filtered_df_fr %>%
mutate(frailty_score = rowSums(select(., -all_of(cols_to_exclude)), na.rm = TRUE)) %>%
mutate(across(where(is.list), ~ sapply(., function(x) paste(unlist(x), collapse = ","))))
# Compute frailty score by summing only the selected columns from unique_categories
frailty_pop2 <- filtered_df_fr %>%
mutate(frailty_score = rowSums(select(., all_of(unique_categories)), na.rm = TRUE))  # Exclude NA values
frailty_pop2 <- frailty_pop2 %>%
mutate(across(where(is.list), ~ sapply(., function(x) paste(unlist(x), collapse = ","))))
cols_to_exclude <- c("ICD", "category_codes", "chronique_code_cat2", "cleaned_chronique_code_cat2",
"chronique_code_cat1", "cleaned_chronique_code_cat1", "basal_codes", "updated_icd_codes")
frailty_pop2 <- frailty_pop2 %>%
select(-all_of(cols_to_exclude))
View(frailty_pop2)
# Write the final data, could be used for verifications
#file_path <- "CHUM_Data/frailty_codes_V2.csv"
#write.csv(frailty_pop2, file = file_path, row.names = FALSE) # or filtered_df
file_path <- paste0("CHUM_Data/frailty_codes_V2_", input_basename, ".csv")
# Write to file
write.csv(frailty_pop2, file = file_path, row.names = FALSE)
frag_final <- frailty_pop2 %>%
select(patient_id, start_date, episode_id, all_of(unique_categories))
View(frag_final)
source("./CHUM_Code/setup_package.R")  # Load and install required packages
source("./CHUM_Code/source_scripts.R")  # Source external scripts
coding_system <- get_coding_system()
invisible(sapply(list.files("CHUM_Code", pattern = "\\.R$", full.names = TRUE), source))
#input_file <- "./CHUM_Data/data_test1.csv", mimic_test2.csv
input_file <- "./CHUM_Data/testpackage.csv"
input_basename <- tools::file_path_sans_ext(basename(input_file))
cleaned_path <- paste0("CHUM_Data/input_data_cleaned_", input_basename, ".csv")
updated_path <- paste0("CHUM_Data/updated_episodes_carry_forward_", input_basename, ".csv")
col_mapping <- list(patient_id = "trajectoire_id",
ICD = "diagnostic_code",
start_date = "date_debut",
end_date = "date_fin",
episode_id = "episode_id")
run_pipeline <- function(input_file) {
Create_data(input_file)
chronic_pathologies(cleaned_path)
frailty_results <- Frailty_Calculation(updated_path)
fr_grouped <- frailty_results$fr_grouped
fr_grouped_como <- frailty_results$fr_grouped_como
# Capture results and convert to data frames
comorbidity_results <- Comorbidity_Frailty_Calculation(updated_path, fr_grouped, fr_grouped_como)#updated_episodes_V2.csv
comorbidity_results <- lapply(comorbidity_results, function(x) {
if (!is.data.frame(x)) as.data.frame(x) else x
})
return(comorbidity_results)
}
# Run the pipeline
df_result <- run_pipeline(input_file)
source("./CHUM_Code/setup_package.R")  # Load and install required packages
source("./CHUM_Code/source_scripts.R")  # Source external scripts
invisible(sapply(list.files("CHUM_Code", pattern = "\\.R$", full.names = TRUE), source))
#input_file <- "./CHUM_Data/data_test1.csv", mimic_test2.csv
input_file <- "./CHUM_Data/testpackage.csv"
input_basename <- tools::file_path_sans_ext(basename(input_file))
cleaned_path <- paste0("CHUM_Data/input_data_cleaned_", input_basename, ".csv")
updated_path <- paste0("CHUM_Data/updated_episodes_carry_forward_", input_basename, ".csv")
col_mapping <- list(patient_id = "trajectoire_id",
ICD = "diagnostic_code",
start_date = "date_debut",
end_date = "date_fin",
episode_id = "episode_id")
run_pipeline <- function(input_file) {
Create_data(input_file)
chronic_pathologies(cleaned_path)
frailty_results <- Frailty_Calculation(updated_path)
fr_grouped <- frailty_results$fr_grouped
fr_grouped_como <- frailty_results$fr_grouped_como
# Capture results and convert to data frames
comorbidity_results <- Comorbidity_Frailty_Calculation(updated_path, fr_grouped, fr_grouped_como)#updated_episodes_V2.csv
comorbidity_results <- lapply(comorbidity_results, function(x) {
if (!is.data.frame(x)) as.data.frame(x) else x
})
return(comorbidity_results)
}
# Run the pipeline
df_result <- run_pipeline(input_file)
